{"ast":null,"code":"var _jsxFileName = \"/Users/saikireeti/meshy-image-to-3d/src/components/ImageUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { createImageTo3DTask } from '../services/meshyApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageUploader({\n  onTaskCreated,\n  onError\n}) {\n  _s();\n  const [imageUrl, setImageUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const isValidUrl = url => {\n    try {\n      new URL(url);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!isValidUrl(imageUrl)) {\n      setError('Please enter a valid URL');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    console.log('Submitting image URL:', imageUrl);\n    try {\n      console.log('Calling createImageTo3DTask');\n      const result = await createImageTo3DTask(imageUrl);\n      console.log('Task created successfully:', JSON.stringify(result, null, 2));\n\n      // Reshape the response to match expected structure\n      const taskData = {\n        task_id: result.result\n      };\n      console.log('Reshaped task data:', JSON.stringify(taskData, null, 2));\n      onTaskCreated(taskData.task_id);\n    } catch (err) {\n      console.error('Error in handleSubmit:', err);\n      setError('Failed to create task: ' + err.message);\n      if (onError) onError(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"imageUrlInput\",\n      children: \"Image URL:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"imageUrlInput\",\n      type: \"text\",\n      value: imageUrl,\n      onChange: e => setImageUrl(e.target.value),\n      placeholder: \"Enter image URL\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: isLoading || !imageUrl.trim(),\n      children: isLoading ? 'Converting...' : 'Convert to 3D'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageUploader, \"2kufqsL+ayWAHeVmRXiv5Fai/5Y=\");\n_c = ImageUploader;\nexport default ImageUploader;\nvar _c;\n$RefreshReg$(_c, \"ImageUploader\");","map":{"version":3,"names":["React","useState","createImageTo3DTask","jsxDEV","_jsxDEV","ImageUploader","onTaskCreated","onError","_s","imageUrl","setImageUrl","isLoading","setIsLoading","error","setError","isValidUrl","url","URL","e","handleSubmit","preventDefault","console","log","result","JSON","stringify","taskData","task_id","err","message","onSubmit","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","type","value","onChange","target","placeholder","required","disabled","trim","className","_c","$RefreshReg$"],"sources":["/Users/saikireeti/meshy-image-to-3d/src/components/ImageUploader.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { createImageTo3DTask } from '../services/meshyApi';\n\nfunction ImageUploader({ onTaskCreated, onError }) {\n  const [imageUrl, setImageUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const isValidUrl = (url) => {\n    try {\n      new URL(url);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!isValidUrl(imageUrl)) {\n      setError('Please enter a valid URL');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    console.log('Submitting image URL:', imageUrl);\n\n    try {\n      console.log('Calling createImageTo3DTask');\n      const result = await createImageTo3DTask(imageUrl);\n      console.log('Task created successfully:', JSON.stringify(result, null, 2));\n      \n      // Reshape the response to match expected structure\n      const taskData = { task_id: result.result };\n      console.log('Reshaped task data:', JSON.stringify(taskData, null, 2));\n      \n      onTaskCreated(taskData.task_id);\n    } catch (err) {\n      console.error('Error in handleSubmit:', err);\n      setError('Failed to create task: ' + err.message);\n      if (onError) onError(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"imageUrlInput\">Image URL:</label>\n      <input\n        id=\"imageUrlInput\"\n        type=\"text\"\n        value={imageUrl}\n        onChange={(e) => setImageUrl(e.target.value)}\n        placeholder=\"Enter image URL\"\n        required\n      />\n      <button type=\"submit\" disabled={isLoading || !imageUrl.trim()}>\n        {isLoading ? 'Converting...' : 'Convert to 3D'}\n      </button>\n      {error && <p className=\"error\">{error}</p>}\n    </form>\n  );\n}\n\nexport default ImageUploader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}